// <auto-generated />
using System;
using DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250905074711_settingFKsAsNullable")]
    partial class settingFKsAsNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_CATEGORY");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("F2_CATEGORY");
                });

            modelBuilder.Entity("Models.Circuit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_CIRCUIT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("ID_COUNTRY");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<int?>("IdFastestLap")
                        .HasColumnType("int")
                        .HasColumnName("ID_FASTEST_LAP");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IMAGE_ROUTE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("IdFastestLap");

                    b.ToTable("F2_CIRCUIT");
                });

            modelBuilder.Entity("Models.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_COMPETITION");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<bool>("Playoffs")
                        .HasColumnType("bit")
                        .HasColumnName("PLAYOFFS_ON_CHAMPIONSHIP");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("F2_COMPETITION");
                });

            modelBuilder.Entity("Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_COUNTRY");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("COUNTRY_CODE");

                    b.Property<string>("FlagSrc")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FLAG_ROUTE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("F2_COUNTRY");
                });

            modelBuilder.Entity("Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_DRIVER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("ID_COUNTRY");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IMAGE_ROUTE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<int?>("StatsId")
                        .HasColumnType("int")
                        .HasColumnName("ID_STATS");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("StatsId");

                    b.ToTable("F2_DRIVER");
                });

            modelBuilder.Entity("Models.DriverCompetition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_F2_DRIVER_COMPETITION");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompetitionId")
                        .HasColumnType("int")
                        .HasColumnName("ID_COMPETITION");

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("ID_DRIVER");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("ID_TEAM");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("DriverId");

                    b.HasIndex("TeamId");

                    b.ToTable("F2_DRIVER_COMPETITION");
                });

            modelBuilder.Entity("Models.FastLap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_FAST_LAP");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("ID_DRIVER");

                    b.Property<TimeOnly>("LapTime")
                        .HasColumnType("time")
                        .HasColumnName("LAP_TIME");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("F2_FAST_LAP");
                });

            modelBuilder.Entity("Models.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_RACE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CircuitId")
                        .HasColumnType("int")
                        .HasColumnName("ID_CIRCUIT");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("ID_COUNTRY");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IMAGE_ROUTE");

                    b.Property<int>("Laps")
                        .HasColumnType("int")
                        .HasColumnName("LAP_NUMBER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.HasIndex("CircuitId");

                    b.HasIndex("CountryId");

                    b.ToTable("F2_RACE");
                });

            modelBuilder.Entity("Models.Stats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_STATS");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FastestLaps")
                        .HasColumnType("int")
                        .HasColumnName("FASTEST_LAPS");

                    b.Property<int>("Poles")
                        .HasColumnType("int")
                        .HasColumnName("POLES");

                    b.Property<int>("RaceStarts")
                        .HasColumnType("int")
                        .HasColumnName("RACE_STARTS");

                    b.Property<int>("Top10")
                        .HasColumnType("int")
                        .HasColumnName("TOP10");

                    b.Property<int>("Top3")
                        .HasColumnType("int")
                        .HasColumnName("TOP3");

                    b.Property<int>("Top5")
                        .HasColumnType("int")
                        .HasColumnName("TOP5");

                    b.Property<int>("Wins")
                        .HasColumnType("int")
                        .HasColumnName("WINS");

                    b.HasKey("Id");

                    b.ToTable("F2_STATS");
                });

            modelBuilder.Entity("Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_TEAM");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<int?>("StatsId")
                        .HasColumnType("int")
                        .HasColumnName("ID_STATS");

                    b.HasKey("Id");

                    b.HasIndex("StatsId");

                    b.ToTable("F2_TEAM");
                });

            modelBuilder.Entity("Models.Circuit", b =>
                {
                    b.HasOne("Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Models.FastLap", "FastestLap")
                        .WithMany()
                        .HasForeignKey("IdFastestLap");

                    b.Navigation("Country");

                    b.Navigation("FastestLap");
                });

            modelBuilder.Entity("Models.Competition", b =>
                {
                    b.HasOne("Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Models.Driver", b =>
                {
                    b.HasOne("Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Models.Stats", "Stats")
                        .WithMany()
                        .HasForeignKey("StatsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("Models.DriverCompetition", b =>
                {
                    b.HasOne("Models.Competition", "Competition")
                        .WithMany()
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Competition");

                    b.Navigation("Driver");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Models.FastLap", b =>
                {
                    b.HasOne("Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Models.Race", b =>
                {
                    b.HasOne("Models.Circuit", "circuit")
                        .WithMany()
                        .HasForeignKey("CircuitId");

                    b.HasOne("Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");

                    b.Navigation("circuit");
                });

            modelBuilder.Entity("Models.Team", b =>
                {
                    b.HasOne("Models.Stats", "Stats")
                        .WithMany()
                        .HasForeignKey("StatsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Stats");
                });
#pragma warning restore 612, 618
        }
    }
}
